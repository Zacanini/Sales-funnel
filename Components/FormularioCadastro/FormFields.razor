@namespace Sales_funnel.Components.FormularioCadastro
@using Sales_funnel.Components.UI

<div class="max-w-md mx-auto">
    <form @onsubmit="HandleSubmit" class="space-y-6">
        <div class="relative group">
            <InputField 
                Label="Nome completo" 
                Placeholder="Digite seu nome completo"
                Value="@formData.Name"
                ValueChanged="@((value) => formData.Name = value)"
                HasError="@(!string.IsNullOrEmpty(errors.Name))"
                ErrorMessage="@errors.Name"
                Icon="user"
                Class="bg-blue-50 focus:bg-white transition-colors duration-300" />
        </div>
            
        <div class="relative group">
            <InputField 
                Label="Email" 
                Placeholder="seu.email@exemplo.com"
                Type="email"
                Value="@formData.Email"
                ValueChanged="@((value) => formData.Email = value)"
                HasError="@(!string.IsNullOrEmpty(errors.Email))"
                ErrorMessage="@errors.Email"
                Icon="mail"
                Class="bg-blue-50 focus:bg-white transition-colors duration-300" />
        </div>
            
        <div class="relative group">
            <InputField 
                Label="Telefone" 
                Placeholder="(00) 00000-0000"
                Type="tel"
                Value="@formData.Phone"
                ValueChanged="@((value) => formData.Phone = value)"
                HasError="@(!string.IsNullOrEmpty(errors.Phone))"
                ErrorMessage="@errors.Phone"
                Icon="phone"
                Class="bg-blue-50 focus:bg-white transition-colors duration-300" />
            <div class="text-xs text-gray-500 mt-1">
                <span class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                    </svg>
                    Usamos apenas para enviar conteúdo relevante (nunca spam)
                </span>
            </div>
        </div>
            
        <div class="p-4 rounded-xl bg-yellow-50 border border-yellow-100 mb-4">
            <label class="flex items-start cursor-pointer group">
                <div class="relative flex items-center h-5">
                    <input 
                        type="checkbox" 
                        class="absolute opacity-0 w-0 h-0 peer" 
                        checked="@formData.AcceptsTerms"
                        @onchange="@(e => formData.AcceptsTerms = (bool)e.Value!)" />
                    <div class="w-5 h-5 bg-white border-2 border-gray-300 rounded mr-3 flex items-center justify-center peer-checked:border-blue-500 peer-checked:bg-blue-500 transition-all duration-200">
                        <svg class="w-3 h-3 text-white @(formData.AcceptsTerms ? "opacity-100" : "opacity-0") transition-opacity duration-200" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                </div>
                <div class="ml-2 text-sm text-gray-600">
                    <span>
                        Concordo em receber conteúdos por email e aceito os <a href="#" class="text-blue-500 hover:underline font-medium">termos de uso</a> e <a href="#" class="text-blue-500 hover:underline font-medium">política de privacidade</a>.
                    </span>
                </div>
            </label>
            @if (!string.IsNullOrEmpty(errors.AcceptsTerms))
            {
                <p class="text-red-500 text-sm mt-2 ml-7">@errors.AcceptsTerms</p>
            }
        </div>
        
        @if (!string.IsNullOrEmpty(formError))
        {
            <Alert Type="error" Class="mb-4">@formError</Alert>
        }
        
        @if (formSuccess)
        {
            <Alert Type="success" Class="mb-4">
                <b>Cadastro realizado com sucesso!</b> 
                Em instantes você será redirecionado para acessar conteúdos exclusivos.
            </Alert>
        }
        
        <div class="flex flex-col items-center">
            <Button 
                Type="submit" 
                Variant="primary" 
                Size="lg"
                Disabled="isSubmitting"
                Class="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 py-4 text-lg font-bold shadow-lg transform transition hover:-translate-y-0.5">
                @if (isSubmitting)
                {
                    <div class="flex items-center justify-center">
                        <div class="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent mr-3"></div>
                        <span>Processando...</span>
                    </div>
                }
                else
                {
                    <span>Cadastrar e Acessar Conteúdo</span>
                }
            </Button>
            
            <div class="flex items-center justify-center mt-4 text-gray-500 text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                </svg>
                <span>Seus dados estão protegidos com criptografia</span>
            </div>
        </div>
    </form>
</div>

@code {
    [Parameter]
    public EventCallback<FormData> OnFormSubmit { get; set; }
    
    private FormData formData = new FormData();
    private FormErrors errors = new FormErrors();
    private bool isSubmitting = false;
    private bool formSuccess = false;
    private string formError = "";
    
    private async Task HandleSubmit()
    {
        formError = "";
        formSuccess = false;
        
        if (ValidateForm())
        {
            try {
                isSubmitting = true;
                
                // Simular um atraso de processamento
                await Task.Delay(1500);
                
                await OnFormSubmit.InvokeAsync(formData);
                formSuccess = true;
                
                // Reiniciar formulário
                formData = new FormData();
            }
            catch {
                formError = "Ocorreu um erro ao processar seu cadastro. Por favor, tente novamente.";
            }
            finally {
                isSubmitting = false;
            }
        }
    }
    
    private bool ValidateForm()
    {
        errors = new FormErrors();
        bool isValid = true;
        
        if (string.IsNullOrWhiteSpace(formData.Name))
        {
            errors.Name = "O nome é obrigatório";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(formData.Email))
        {
            errors.Email = "O email é obrigatório";
            isValid = false;
        }
        else if (!IsValidEmail(formData.Email))
        {
            errors.Email = "Formato de email inválido";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(formData.Phone))
        {
            errors.Phone = "O telefone é obrigatório";
            isValid = false;
        }
        
        if (!formData.AcceptsTerms)
        {
            errors.AcceptsTerms = "Você precisa aceitar os termos para prosseguir";
            isValid = false;
        }
        
        return isValid;
    }
    
    private bool IsValidEmail(string email)
    {
        try {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch {
            return false;
        }
    }
    
    public class FormData
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public bool AcceptsTerms { get; set; } = false;
    }
    
    public class FormErrors
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string AcceptsTerms { get; set; } = "";
    }
}